{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Priestly Bassey\\\\Documents\\\\My Palettes\\\\HuntAmazonFind\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\n/**\n * React Router v6.3.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { parsePath, createMemoryHistory, Action } from 'history';\nexport { Action as NavigationType, createPath, parsePath } from 'history';\nimport { createContext, useContext, useMemo, useRef, useEffect, useCallback, createElement, useState, useLayoutEffect, Children, isValidElement, Fragment } from 'react';\nvar NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nvar LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nvar RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nvar alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, function (_) {\n    return params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\");\n  });\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n    // but do not consume the character in the matched path so they can match against\n    // nested paths.\n    \"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref5 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref5.pathname,\n      _ref5$search = _ref5.search,\n      search = _ref5$search === void 0 ? \"\" : _ref5$search,\n      _ref5$hash = _ref5.hash,\n      hash = _ref5$hash === void 0 ? \"\" : _ref5$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  var to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  var toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  var from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  var nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\n\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n\n  var _useContext = useContext(NavigationContext),\n      basename = _useContext.basename,\n      navigator = _useContext.navigator;\n\n  var _useResolvedPath = useResolvedPath(to),\n      hash = _useResolvedPath.hash,\n      pathname = _useResolvedPath.pathname,\n      search = _useResolvedPath.search;\n\n  var joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    var toPathname = getToPathname(to);\n    var endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search: search,\n    hash: hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\n\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\n\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\n\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\n\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n\n  var _useLocation = useLocation(),\n      pathname = _useLocation.pathname;\n\n  return useMemo(function () {\n    return matchPath(pattern, pathname);\n  }, [pathname, pattern]);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\n\n\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n\n  var _useContext2 = useContext(NavigationContext),\n      basename = _useContext2.basename,\n      navigator = _useContext2.navigator;\n\n  var _useContext3 = useContext(RouteContext),\n      matches = _useContext3.matches;\n\n  var _useLocation2 = useLocation(),\n      locationPathname = _useLocation2.pathname;\n\n  var routePathnamesJson = JSON.stringify(matches.map(function (match) {\n    return match.pathnameBase;\n  }));\n  var activeRef = useRef(false);\n  useEffect(function () {\n    activeRef.current = true;\n  });\n  var navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    var path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n\nvar OutletContext = /*#__PURE__*/createContext(null);\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\n */\n\nfunction useOutletContext() {\n  return useContext(OutletContext);\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\n\n\nfunction useOutlet(context) {\n  var outlet = useContext(RouteContext).outlet;\n\n  if (outlet) {\n    return /*#__PURE__*/createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n\n  return outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\n\n\nfunction useParams() {\n  var _useContext4 = useContext(RouteContext),\n      matches = _useContext4.matches;\n\n  var routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\n\n\nfunction useResolvedPath(to) {\n  var _useContext5 = useContext(RouteContext),\n      matches = _useContext5.matches;\n\n  var _useLocation3 = useLocation(),\n      locationPathname = _useLocation3.pathname;\n\n  var routePathnamesJson = JSON.stringify(matches.map(function (match) {\n    return match.pathnameBase;\n  }));\n  return useMemo(function () {\n    return resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n  }, [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\n\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n\n  var _useContext6 = useContext(RouteContext),\n      parentMatches = _useContext6.matches;\n\n  var routeMatch = parentMatches[parentMatches.length - 1];\n  var parentParams = routeMatch ? routeMatch.params : {};\n  var parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  var parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  var parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    var parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n\n  var locationFromContext = useLocation();\n  var location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    var parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  var pathname = location.pathname || \"/\";\n  var remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  var matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(function (match) {\n    return Object.assign({}, match, {\n      params: Object.assign({}, parentParams, match.params),\n      pathname: joinPaths([parentPathnameBase, match.pathname]),\n      pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n    });\n  }), parentMatches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight(function (outlet, match, index) {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : outlet,\n      value: {\n        outlet: outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\n\n\nfunction MemoryRouter(_ref) {\n  var basename = _ref.basename,\n      children = _ref.children,\n      initialEntries = _ref.initialEntries,\n      initialIndex = _ref.initialIndex;\n  var historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries: initialEntries,\n      initialIndex: initialIndex\n    });\n  }\n\n  var history = historyRef.current;\n\n  var _useState = useState({\n    action: history.action,\n    location: history.location\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useLayoutEffect(function () {\n    return history.listen(setState);\n  }, [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\n\n\nfunction Navigate(_ref2) {\n  var to = _ref2.to,\n      replace = _ref2.replace,\n      state = _ref2.state;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  var navigate = useNavigate();\n  useEffect(function () {\n    navigate(to, {\n      replace: replace,\n      state: state\n    });\n  });\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\n\n\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\n\n\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\n\n\nfunction Router(_ref3) {\n  var _ref3$basename = _ref3.basename,\n      basenameProp = _ref3$basename === void 0 ? \"/\" : _ref3$basename,\n      _ref3$children = _ref3.children,\n      children = _ref3$children === void 0 ? null : _ref3$children,\n      locationProp = _ref3.location,\n      _ref3$navigationType = _ref3.navigationType,\n      navigationType = _ref3$navigationType === void 0 ? Action.Pop : _ref3$navigationType,\n      navigator = _ref3.navigator,\n      _ref3$static = _ref3.static,\n      staticProp = _ref3$static === void 0 ? false : _ref3$static;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  var basename = normalizePathname(basenameProp);\n  var navigationContext = useMemo(function () {\n    return {\n      basename: basename,\n      navigator: navigator,\n      static: staticProp\n    };\n  }, [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  var _locationProp = locationProp,\n      _locationProp$pathnam = _locationProp.pathname,\n      pathname = _locationProp$pathnam === void 0 ? \"/\" : _locationProp$pathnam,\n      _locationProp$search = _locationProp.search,\n      search = _locationProp$search === void 0 ? \"\" : _locationProp$search,\n      _locationProp$hash = _locationProp.hash,\n      hash = _locationProp$hash === void 0 ? \"\" : _locationProp$hash,\n      _locationProp$state = _locationProp.state,\n      state = _locationProp$state === void 0 ? null : _locationProp$state,\n      _locationProp$key = _locationProp.key,\n      key = _locationProp$key === void 0 ? \"default\" : _locationProp$key;\n  var location = useMemo(function () {\n    var trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search: search,\n      hash: hash,\n      state: state,\n      key: key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location: location,\n      navigationType: navigationType\n    }\n  }));\n}\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\n\n\nfunction Routes(_ref4) {\n  var children = _ref4.children,\n      location = _ref4.location;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\n\n\nfunction createRoutesFromChildren(children) {\n  var routes = [];\n  Children.forEach(children, function (element) {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    var route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes };","map":{"version":3,"sources":["C:\\Users\\Priestly Bassey\\Documents\\My Palettes\\HuntAmazonFind\\packages\\react-router\\lib\\context.ts","C:\\Users\\Priestly Bassey\\Documents\\My Palettes\\HuntAmazonFind\\packages\\react-router\\lib\\router.ts","C:\\Users\\Priestly Bassey\\Documents\\My Palettes\\HuntAmazonFind\\packages\\react-router\\lib\\hooks.tsx","C:\\Users\\Priestly Bassey\\Documents\\My Palettes\\HuntAmazonFind\\packages\\react-router\\lib\\components.tsx"],"names":["NavigationContext","React","LocationContext","RouteContext","outlet","matches","console","alreadyWarned","params","_","basename","location","parsePath","pathname","stripBasename","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","parentPath","routes","meta","relativePath","route","caseSensitive","childrenIndex","path","joinPaths","routesMeta","score","computeScore","b","a","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","initialScore","segment","siblings","n","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","pathnameBase","normalizePathname","pattern","compilePath","captureGroups","paramName","splatValue","memo","safelyDecodeURIComponent","paramNames","regexpSource","matcher","decodeURIComponent","fromPathname","search","hash","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","to","toArg","from","routePathnameIndex","routePathnames","toSegments","resolvePath","nextChar","paths","useInRouterContext","navigator","useResolvedPath","joinedPathname","getToPathname","endsWithSlash","useLocation","locationPathname","routePathnamesJson","JSON","activeRef","navigate","options","resolveTo","OutletContext","context","routeMatch","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","warningOnce","locationFromContext","parsedLocationArg","matchRoutes","_renderMatches","index","initialIndex","historyRef","createMemoryHistory","initialEntries","history","action","state","useNavigate","replace","useOutlet","props","basenameProp","children","navigationType","NavigationType","static","staticProp","navigationContext","locationProp","key","trailingPathname","useRoutes","createRoutesFromChildren","element"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport type { History, Location } from \"history\";\nimport { Action as NavigationType } from \"history\";\n\nimport type { RouteMatch } from \"./router\";\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Pick<History, \"go\" | \"push\" | \"replace\" | \"createHref\">;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n","import type { Location, Path, To } from \"history\";\nimport { parsePath } from \"history\";\n\nexport function invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nexport function warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string. Otherwise, it's a failure.\n    Segment extends `:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObject;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n","import * as React from \"react\";\nimport type { Location, Path, To } from \"history\";\nimport { Action as NavigationType, parsePath } from \"history\";\n\nimport { LocationContext, NavigationContext, RouteContext } from \"./context\";\nimport type {\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RouteMatch,\n  RouteObject,\n} from \"./router\";\nimport {\n  getToPathname,\n  invariant,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  resolveTo,\n  warning,\n  warningOnce,\n} from \"./router\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase]),\n        })\n      ),\n    parentMatches\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : outlet\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1)),\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n","import * as React from \"react\";\nimport type { InitialEntry, Location, MemoryHistory, To } from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath,\n} from \"history\";\n\nimport { LocationContext, NavigationContext, Navigator } from \"./context\";\nimport {\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\nimport type { RouteMatch, RouteObject } from \"./router\";\nimport { invariant, normalizePathname, stripBasename, warning } from \"./router\";\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactNode | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key,\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n"]},"metadata":{},"sourceType":"module"}